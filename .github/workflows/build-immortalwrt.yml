# 定义工作流的名称
name: build-immortalwrt

# 自定义工作流运行的显示名称，根据输入参数动态生成
run-name: 构建 ImmortalWrt ${{ github.event.inputs.platform_type }} ${{ github.event.inputs.firmware_version }} 固件 (大小:${{ github.event.inputs.firmware_size }}MB)
# 定义工作流触发条件：手动触发（workflow_dispatch）
on:
  workflow_dispatch:
    # 输入参数
    inputs:
      platform_type:
        description: '请输入要编译固件对应平台'
        required: false
        default: 'x86-64'
        type: choice
        options:
          - 'x86-64'
          - 'Raspberry-Pi-4B'
      firmware_version:
        description: '请输入要编译固件版本'
        required: false
        default: '24.10.0'
        type: choice
        options:
          - '24.10.0'
          - '23.05.4'
      firmware_size:
        description: '请输入要编译固件大小（支持逗号分隔多种大小同时编译）单位(MB)'
        required: true
        default: '4096'
      enable_pppoe:
        description: "是否启用PPPoE拨号"
        required: true
        default: 'no'
        type: choice
        options:
        - 'yes'
        - 'no'
      custom_packages:
        description: '自定义软件包列表（空格分隔）'
        required: false
        default: ''


# 这定义了一个名为build的作业（工作流）
jobs:
  build:
    # 指定运行环境为Ubuntu 22.04
    runs-on: ubuntu-22.04

    # 设置环境变量
    env:
      sys_pwd: ${{ secrets.SYS_PWD }}
      lan_ip: ${{ secrets.LAN_IP }}
      wifi_name: ${{ secrets.WIFI_NAME }}
      wifi_pwd: ${{ secrets.WIFI_PWD }}
      platform_type: "${{ github.event.inputs.platform_type }}"
      firmware_version: "${{ github.event.inputs.firmware_version }}"
      firmware_sizes: "${{ github.event.inputs.firmware_size }}"
      enable_pppoe: "${{ github.event.inputs.enable_pppoe }}"
      custom_packages: "${{ github.event.inputs.custom_packages }}"

    # 定义作业（工作流）步骤
    steps:
      - name: 打印环境变量
        run: |
          echo "固件版本:${{ github.event.inputs.firmware_version }}"
          echo "固件大小:${{ github.event.inputs.firmware_size }}"
          echo "是否启用PPPoE拨号:${{ github.event.inputs.enable_pppoe }}"
          echo "自定义软件包:${{ github.event.inputs.custom_packages }}"
          echo "固件信息 version:$firmware_version, size:$firmware_sizes"

      - name: 释放磁盘空间
        run: |
          echo "释放磁盘空间以确保有足够空间进行编译..."
          # 显示初始磁盘使用情况
          df -h

          # 删除不需要的大型软件包和目录
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL

          # 清理apt缓存
          sudo apt clean
          sudo apt autoremove -y

          # 删除不需要的Docker镜像
          docker system prune -af

          # 显示清理后的磁盘使用情况
          echo "清理后的磁盘使用情况:"
          df -h

      - name: 1. 检出代码仓库
        uses: actions/checkout@v4

      # 设置构建脚本的执行权限
      - name: 编译前环境准备
        run: |
          # 设置构建脚本的执行权限
          chmod +x ${{ github.workspace }}/src/build.sh

          #准备环境变量文件
          platform_type="${{ github.event.inputs.platform_type }}"
          firmware_version="${{ github.event.inputs.firmware_version }}"
          pppoe_enable="${{ github.event.inputs.enable_pppoe }}"
          custom_packages="${{ github.event.inputs.custom_packages }}"

          # 构建完整的镜像名称
          # 根据平台类型选择正确的Docker镜像名称
          if [ "$platform_type" = "Raspberry-Pi-4B" ]; then
            # 树莓派4B使用bcm27xx-bcm2711作为镜像名称
            image_name="immortalwrt/imagebuilder:bcm27xx-bcm2711-openwrt-${firmware_version}"
            # 树莓派4B特定的构建配置
            profile="rpi-4"
            # 移除单网卡模式设置
            echo "使用树莓派4B配置文件: $profile"
          else
            # x86-64保持不变
            image_name="immortalwrt/imagebuilder:${platform_type}-openwrt-${firmware_version}"
            # x86-64默认配置
            profile="generic"
            # 移除单网卡模式设置
            echo "使用x86-64配置文件: $profile"
          fi

          echo "使用Docker镜像: $image_name"
          # 将镜像名称保存为环境变量，供后续步骤使用
          echo "IMAGE_NAME=$image_name" >> $GITHUB_ENV

          # 创建bin目录（如果不存在）
          mkdir -p "${{ github.workspace }}/bin"
          # 创建src目录（如果不存在）
          mkdir -p "${{ github.workspace }}/src"

          # 创建环境变量文件
          cat > env.list << EOF
          SYS_ACCOUNT=${{ secrets.SYS_ACCOUNT }}
          SYS_PWD=${{ secrets.SYS_PWD }}
          LAN_IP=${{ secrets.LAN_IP }}
          WIFI_NAME=${{ secrets.WIFI_NAME }}
          WIFI_PWD=${{ secrets.WIFI_PWD }}
          PPPOE_ENABLE="${{ github.event.inputs.enable_pppoe }}"
          PPPOE_ACCOUNT=${{ secrets.PPPOE_ACCOUNT }}
          PPPOE_PWD=${{ secrets.PPPOE_PWD }}
          BUILD_AUTH=${{ secrets.BUILD_AUTH }}
          ZIP_PWD=${{ secrets.ZIP_PWD }}
          PLATFORM_TYPE="${{ github.event.inputs.platform_type }}"
          FIRMWARE_VERSION="${{ github.event.inputs.firmware_version }}"
          BUILD_PROFILE="${profile}"
          CUSTOM_PACKAGES="${{ github.event.inputs.custom_packages }}"
          EOF

          echo "环境变量文件创建成功"

      - name: 2. 构建ImmortalWrt固件
        id: build_firmware
        run: |
          firmware_sizes="${{ github.event.inputs.firmware_size }}"
          platform_type="${{ github.event.inputs.platform_type }}"

          # 它将 firmware_sizes 字符串按逗号分隔，拆分成数组 firmware_size_list
          IFS=',' read -r -a firmware_size_list <<< "$firmware_sizes"

          # 设置构建状态标志
          build_success=true

          # 循环构建不同大小的固件
          for firmware_size in "${firmware_size_list[@]}"; do
            # 确保固件大小是纯数字
            firmware_size=$(echo "$firmware_size" | tr -d ' "')

            echo "固件信息 platform: $platform_type, version: ${{ github.event.inputs.firmware_version }}, size: $firmware_size"

            # 清理Docker缓存，释放空间
            docker system prune -af --volumes

            # 运行Docker容器进行构建
            docker run --rm -i \
              --user root \
              -v "${{ github.workspace }}/bin:/home/build/immortalwrt/bin" \
              -v "${{ github.workspace }}/files:/home/build/immortalwrt/files" \
              -v "${{ github.workspace }}/src:/home/build/immortalwrt/src" \
              --env-file env.list \
              -e PART_SIZE="$firmware_size" \
              "${IMAGE_NAME}" \
              /bin/bash /home/build/immortalwrt/src/build.sh

            # 检查构建结果
            if [ $? -ne 0 ]; then
              echo "固件大小 ${firmware_size}MB 构建失败！"
              build_success=false
            else
              echo "固件大小 ${firmware_size}MB 构建成功！"

              # 修复权限问题，然后清理不必要的文件
              echo "复制重要文件并清理不需要的临时文件..."
              # 先修复权限
              sudo chown -R $(id -u):$(id -g) "${{ github.workspace }}/bin"
              # 只保留7z和txt文件
              find "${{ github.workspace }}/bin/targets" -type f -not -name "*.7z" -not -name "*.txt" -not -name "*.sha256" -exec sudo rm -f {} \; || true
            fi

            # 显示构建后的磁盘空间
            echo "构建后磁盘空间:"
            df -h
          done

          # 设置构建结果到输出变量
          echo "build_success=$build_success" >> $GITHUB_OUTPUT
          
          # 如果任何一个构建失败，则整体失败
          if [ "$build_success" = "false" ]; then
            echo "至少有一个固件构建失败，请检查日志！"
            exit 1
          fi

      - name: 生成固件SHA-256校验和
        run: |
          # 显示bin目录内容，用于调试
          echo "bin目录内容:"
          find ${{ github.workspace }}/bin -type f | sort
          
          # 只复制7z格式的压缩包到工作目录
          cp ${{ github.workspace }}/bin/*.7z ${{ github.workspace }}/ 2>/dev/null || true
          # 复制配置文件到工作目录
          cp ${{ github.workspace }}/bin/config_old.txt ${{ github.workspace }}/
          cp ${{ github.workspace }}/bin/config_new.txt ${{ github.workspace }}/
          # 复制包信息文件到工作目录
          cp ${{ github.workspace }}/bin/packages_info.txt ${{ github.workspace }}/ || true
          
          # 显示当前目录内容，用于调试
          echo "当前工作目录内容:"
          ls -la ${{ github.workspace }}
          
          # 为所有7z包生成SHA-256校验和
          for file in ${{ github.workspace }}/*.7z; do
            if [ -f "$file" ]; then
              echo "生成校验和: $file"
              sha256sum "$file" > "$file.sha256"
              sha256sum -c "$file.sha256"
            fi
          done
          
          # 读取包信息文件（如果存在）- 修改为更安全的方式并处理多余引号
          if [ -f "${{ github.workspace }}/packages_info.txt" ]; then
            # 使用grep提取变量值并去除多余引号
            BASE_PACKAGES=$(grep "^BASE_PACKAGES=" "${{ github.workspace }}/packages_info.txt" | cut -d'=' -f2- | sed 's/^"//;s/"$//;s/""//g')
            EXTRA_PACKAGES=$(grep "^EXTRA_PACKAGES=" "${{ github.workspace }}/packages_info.txt" | cut -d'=' -f2- | sed 's/^"//;s/"$//;s/""//g')
            CUSTOM_PACKAGES=$(grep "^CUSTOM_PACKAGES=" "${{ github.workspace }}/packages_info.txt" | cut -d'=' -f2- | sed 's/^"//;s/"$//;s/""//g')
            PACKAGES=$(grep "^PACKAGES=" "${{ github.workspace }}/packages_info.txt" | cut -d'=' -f2- | sed 's/^"//;s/"$//;s/""//g')
            
            echo "BASE_PACKAGES=$BASE_PACKAGES" >> $GITHUB_ENV
            echo "EXTRA_PACKAGES=$EXTRA_PACKAGES" >> $GITHUB_ENV
            echo "CUSTOM_PACKAGES=$CUSTOM_PACKAGES" >> $GITHUB_ENV
            echo "PACKAGES=$PACKAGES" >> $GITHUB_ENV
          fi

      # 删除已存在的标签
      - name: 删除已经存在的标签
        run: |
          git push --delete origin ImmortalWrt-${{ github.event.inputs.platform_type }}-${{ github.event.inputs.firmware_version }} || true
        continue-on-error: true

      # 清理之前发布的资产文件
      - name: 清理之前的发布资产
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          tag_name: ImmortalWrt-${{ github.event.inputs.platform_type }}-${{ github.event.inputs.firmware_version }}
          delete_release: true
          repo: ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 修改发布步骤，使用环境变量中的固件信息
      - name: 将构建的固件作为Release发布
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: ImmortalWrt-${{ github.event.inputs.platform_type }}-${{ github.event.inputs.firmware_version }}
          body: |
            ### ImmortalWrt 固件信息
            - 平台: ${{ github.event.inputs.platform_type }}
            - 版本: ${{ github.event.inputs.firmware_version }}
            - 固件大小: ${{ github.event.inputs.firmware_size }} MB

            ### 配置文件
            - config_old.txt - 原始配置文件
            - config_new.txt - 修改后配置文件

            ### 软件包信息
            #### 基础软件包
            ```
            ${{ env.BASE_PACKAGES }}
            ```

            #### 额外软件包
            ```
            ${{ env.EXTRA_PACKAGES }}
            ```

            #### 自定义软件包
            ```
            ${{ env.CUSTOM_PACKAGES }}
            ```

            #### 需要安装的软件包
            ```
            ${{ env.PACKAGES }}
            ```

            ### 加密固件包
            - 加密方式: 7z加密
            - 密码: 请联系管理员获取

            ### 固件SHA256校验和
            请查看附件中的 .sha256 文件
          files: |
            ${{ github.workspace }}/*.7z
            ${{ github.workspace }}/*.sha256
            ${{ github.workspace }}/config_old.txt
            ${{ github.workspace }}/config_new.txt
            ${{ github.workspace }}/packages_info.txt
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: false
          draft: false
          prerelease: false
          make_latest: true